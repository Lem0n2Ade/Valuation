#Boot도 YMT을 Kofiabond나 Kisnet에서 자동으로 들고오게 만들기
import numpy as np

basis=1 #이자지급 1년에 1번을 가정
ytm_periods=[1,3,5] # YTM 관측기간이 1년, 3년, 5년
ytm_interests=[0.01, 0.03, 0.05] 
bond_principal=1 

#basis마다 노드 생성
basis_array=np.arange(basis,5+basis,basis)
basis_array

#ytm 보간법
interpolated_ytm_interests=np.interp(basis_array,ytm_periods,ytm_interests)
interpolated_ytm_interests

#현물이자율
spot_rates=[interpolated_ytm_interests[0]] 
#가장 첫 번째 현물이자율은 ytm 관측이자율로 고정
#append를 사용하므로 spot_rates를 리스트로 미리 정의하는 것 

#이자의 현재가치 변수 초기화
만기전표면이자_현가계수누적=0

for idx,ytm in enumerate(interpolated_ytm_interests[1:]):
            
    #기간에 대응하는 현물이자율로 원금이자을 할인하여 이자의 현가 계산
    만기전표면이자_현가계수=1/np.power((1+spot_rates[idx]), idx+1)
            
    #이자누적
    만기전표면이자_현가계수누적+=만기전표면이자_현가계수
            
    #만기원리금 계산 : 원금*(1+ytm*basis)
    만기원리금=1+ytm
        
    #만기원리금의 현재가치
    만기원리금_현가=1-만기전표면이자_현가계수누적*ytm
        
    pv_factor=만기원리금/만기원리금_현가
    spot_rate=(np.power(pv_factor,1/(idx+2))-1)
    spot_rates.append(spot_rate)
        
print(spot_rates)

#선도이자율
forward_rates=[spot_rates[0]]
for i in range(1,len(spot_rates)):
    forward_rate=(np.power((1+spot_rates[i]),i+1)/np.power((1+spot_rates[i-1]),i))-1
    forward_rates.append(forward_rate)
    
print(forward_rates)    
